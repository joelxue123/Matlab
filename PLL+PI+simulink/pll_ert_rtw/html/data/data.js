var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"pll","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"pll.h\"                       /* Model header file */\r\n\r\nstatic RT_MODEL_pll_T pll_M_;\r\nstatic RT_MODEL_pll_T *const pll_MPtr = &pll_M_;/* Real-time model */\r\nstatic B_pll_T pll_B;                  /* Observable signals */\r\nstatic DW_pll_T pll_DW;                /* Observable states */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(RT_MODEL_pll_T *const pll_M);\r\nvoid rt_OneStep(RT_MODEL_pll_T *const pll_M)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(pll_M, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  pll_step(pll_M);\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  RT_MODEL_pll_T *const pll_M = pll_MPtr;\r\n\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Pack model data into RTM */\r\n  pll_M->blockIO = &pll_B;\r\n  pll_M->dwork = &pll_DW;\r\n\r\n  /* Initialize model */\r\n  pll_initialize(pll_M);\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 5.0E-5 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep(pll_M);\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(pll_M) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* Terminate model */\r\n  pll_terminate(pll_M);\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"pll.c","type":"source","group":"model","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: pll.c\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"pll.h\"\r\n#include <math.h>\r\n#include \"rtwtypes.h\"\r\n#include \"pll_capi.h\"\r\n#include <string.h>\r\n\r\n/* Model step function */\r\nvoid pll_step(RT_MODEL_pll_T *const pll_M)\r\n{\r\n  B_pll_T *pll_B = pll_M->blockIO;\r\n  DW_pll_T *pll_DW = pll_M->dwork;\r\n  real_T HoldCosine;\r\n  real_T HoldSine;\r\n\r\n  /* DiscreteIntegrator: '<S1>/Integrator1' */\r\n  pll_B->Integrator1 = pll_DW->Integrator1_DSTATE;\r\n\r\n  /* Sin: '<Root>/Sine Wave' */\r\n  if (pll_DW->systemEnable != 0) {\r\n    pll_DW->lastSin = sin(100.0 * ((pll_M->Timing.clockTick0) * 5.0E-5));\r\n    pll_DW->lastCos = cos(100.0 * ((pll_M->Timing.clockTick0) * 5.0E-5));\r\n    pll_DW->systemEnable = 0;\r\n  }\r\n\r\n  /* Sin: '<Root>/Sine Wave' */\r\n  pll_B->SineWave = ((pll_DW->lastSin * 0.99998750002604164 + pll_DW->lastCos *\r\n                      (-0.0049999791666927081)) * 0.99998750002604164 +\r\n                     (pll_DW->lastCos * 0.99998750002604164 - pll_DW->lastSin *\r\n                      (-0.0049999791666927081)) * 0.0049999791666927081) * 1.0 +\r\n    0.0;\r\n\r\n  /* Sum: '<S1>/Sum1' */\r\n  pll_B->Sum1 = pll_B->SineWave - pll_B->Integrator1;\r\n\r\n  /* Gain: '<S1>/Gain' */\r\n  pll_B->Gain = 1000.0 * pll_B->Sum1;\r\n\r\n  /* Gain: '<S1>/Gain1' */\r\n  pll_B->Gain1 = 250000.0 * pll_B->Sum1;\r\n\r\n  /* DiscreteIntegrator: '<S1>/Integrator' */\r\n  pll_B->Integrator = pll_DW->Integrator_DSTATE;\r\n\r\n  /* Sum: '<S1>/Sum' */\r\n  pll_B->Sum = pll_B->Gain + pll_B->Integrator;\r\n\r\n  /* Update for DiscreteIntegrator: '<S1>/Integrator1' */\r\n  pll_DW->Integrator1_DSTATE += 5.0E-5 * pll_B->Sum;\r\n\r\n  /* Update for Sin: '<Root>/Sine Wave' */\r\n  HoldSine = pll_DW->lastSin;\r\n  HoldCosine = pll_DW->lastCos;\r\n  pll_DW->lastSin = HoldSine * 0.99998750002604164 + HoldCosine *\r\n    0.0049999791666927081;\r\n  pll_DW->lastCos = HoldCosine * 0.99998750002604164 - HoldSine *\r\n    0.0049999791666927081;\r\n\r\n  /* Update for DiscreteIntegrator: '<S1>/Integrator' */\r\n  pll_DW->Integrator_DSTATE += 5.0E-5 * pll_B->Gain1;\r\n\r\n  /* Update absolute time for base rate */\r\n  /* The \"clockTick0\" counts the number of times the code of this task has\r\n   * been executed. The resolution of this integer timer is 5.0E-5, which is the step size\r\n   * of the task. Size of \"clockTick0\" ensures timer will not overflow during the\r\n   * application lifespan selected.\r\n   */\r\n  pll_M->Timing.clockTick0++;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid pll_initialize(RT_MODEL_pll_T *const pll_M)\r\n{\r\n  DW_pll_T *pll_DW = pll_M->dwork;\r\n  B_pll_T *pll_B = pll_M->blockIO;\r\n\r\n  /* Registration code */\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) pll_B), 0,\r\n                sizeof(B_pll_T));\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)pll_DW, 0,\r\n                sizeof(DW_pll_T));\r\n\r\n  /* Initialize DataMapInfo substructure containing ModelMap for C API */\r\n  pll_InitializeDataMapInfo(pll_M);\r\n\r\n  /* Enable for Sin: '<Root>/Sine Wave' */\r\n  pll_DW->systemEnable = 1;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid pll_terminate(RT_MODEL_pll_T *const pll_M)\r\n{\r\n  /* (no terminate code required) */\r\n  UNUSED_PARAMETER(pll_M);\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"pll.h","type":"header","group":"model","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: pll.h\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_pll_h_\r\n#define RTW_HEADER_pll_h_\r\n#ifndef pll_COMMON_INCLUDES_\r\n#define pll_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* pll_COMMON_INCLUDES_ */\r\n\r\n#include \"pll_types.h\"\r\n#include \"rtw_modelmap.h\"\r\n#include <string.h>\r\n#include \"rt_defines.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetDataMapInfo\r\n#define rtmGetDataMapInfo(rtm)         ((rtm)->DataMapInfo)\r\n#endif\r\n\r\n#ifndef rtmSetDataMapInfo\r\n#define rtmSetDataMapInfo(rtm, val)    ((rtm)->DataMapInfo = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T Integrator1;                  /* '<S1>/Integrator1' */\r\n  real_T SineWave;                     /* '<Root>/Sine Wave' */\r\n  real_T Sum1;                         /* '<S1>/Sum1' */\r\n  real_T Gain;                         /* '<S1>/Gain' */\r\n  real_T Gain1;                        /* '<S1>/Gain1' */\r\n  real_T Integrator;                   /* '<S1>/Integrator' */\r\n  real_T Sum;                          /* '<S1>/Sum' */\r\n} B_pll_T;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T Integrator1_DSTATE;           /* '<S1>/Integrator1' */\r\n  real_T Integrator_DSTATE;            /* '<S1>/Integrator' */\r\n  real_T lastSin;                      /* '<Root>/Sine Wave' */\r\n  real_T lastCos;                      /* '<Root>/Sine Wave' */\r\n  int32_T systemEnable;                /* '<Root>/Sine Wave' */\r\n} DW_pll_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_pll_T {\r\n  const char_T * volatile errorStatus;\r\n  B_pll_T *blockIO;\r\n  DW_pll_T *dwork;\r\n\r\n  /*\r\n   * DataMapInfo:\r\n   * The following substructure contains information regarding\r\n   * structures generated in the model's C API.\r\n   */\r\n  struct {\r\n    rtwCAPI_ModelMappingInfo mmi;\r\n  } DataMapInfo;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n  } Timing;\r\n};\r\n\r\n/* Model entry point functions */\r\nextern void pll_initialize(RT_MODEL_pll_T *const pll_M);\r\nextern void pll_step(RT_MODEL_pll_T *const pll_M);\r\nextern void pll_terminate(RT_MODEL_pll_T *const pll_M);\r\n\r\n/* Function to get C API Model Mapping Static Info */\r\nextern const rtwCAPI_ModelMappingStaticInfo*\r\n  pll_GetCAPIStaticMap(void);\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'pll'\r\n * '<S1>'   : 'pll/Subsystem'\r\n */\r\n#endif                                 /* RTW_HEADER_pll_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"pll_private.h","type":"header","group":"model","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: pll_private.h\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_pll_private_h_\r\n#define RTW_HEADER_pll_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"builtin_typeid_types.h\"\r\n#include \"pll_types.h\"\r\n#endif                                 /* RTW_HEADER_pll_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"pll_types.h","type":"header","group":"model","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: pll_types.h\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_pll_types_h_\r\n#define RTW_HEADER_pll_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_pll_T RT_MODEL_pll_T;\r\n\r\n#endif                                 /* RTW_HEADER_pll_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"builtin_typeid_types.h","type":"header","group":"utility","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: builtin_typeid_types.h\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef BUILTIN_TYPEID_TYPES_H\r\n#define BUILTIN_TYPEID_TYPES_H\r\n#ifndef BUILTIN_TYPEID_TYPES\r\n#define BUILTIN_TYPEID_TYPES\r\n\r\n/* Enumeration of built-in data types */\r\ntypedef enum {\r\n  SS_DOUBLE = 0,\r\n  SS_SINGLE = 1,\r\n  SS_INT8 = 2,\r\n  SS_UINT8 = 3,\r\n  SS_INT16 = 4,\r\n  SS_UINT16 = 5,\r\n  SS_INT32 = 6,\r\n  SS_UINT32 = 7,\r\n  SS_BOOLEAN = 8\r\n} BuiltInDTypeId;\r\n\r\n#define SS_NUM_BUILT_IN_DTYPE          ((int)SS_BOOLEAN+1)\r\n\r\n/* Enumeration for MAT-file logging code */\r\ntypedef int DTypeId;\r\n\r\n/* Enumeration of pre-defined data types */\r\ntypedef enum {\r\n  SS_FCN_CALL = 9,\r\n  SS_INTEGER = 10,\r\n  SS_POINTER = 11,\r\n  SS_INTERNAL_DTYPE2 = 12,\r\n  SS_TIMER_UINT32_PAIR = 13,\r\n  SS_CONNECTION_TYPE = 14\r\n} PreDefinedDTypeId;\r\n\r\n#endif                                 /* BUILTIN_TYPEID_TYPES */\r\n#endif                                 /* BUILTIN_TYPEID_TYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_defines.h","type":"header","group":"utility","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rt_defines.h\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rt_defines_h_\r\n#define RTW_HEADER_rt_defines_h_\r\n\r\n/*===========*\r\n * Constants *\r\n *===========*/\r\n#define RT_PI                          3.14159265358979323846\r\n#define RT_PIF                         3.1415927F\r\n#define RT_LN_10                       2.30258509299404568402\r\n#define RT_LN_10F                      2.3025851F\r\n#define RT_LOG10E                      0.43429448190325182765\r\n#define RT_LOG10EF                     0.43429449F\r\n#define RT_E                           2.7182818284590452354\r\n#define RT_EF                          2.7182817F\r\n\r\n/*\r\n * UNUSED_PARAMETER(x)\r\n *   Used to specify that a function parameter (argument) is required but not\r\n *   accessed by the function body.\r\n */\r\n#ifndef UNUSED_PARAMETER\r\n#if defined(__LCC__)\r\n#define UNUSED_PARAMETER(x)                                      /* do nothing */\r\n#else\r\n\r\n/*\r\n * This is the semi-ANSI standard way of indicating that an\r\n * unused function parameter is required.\r\n */\r\n#define UNUSED_PARAMETER(x)            (void) (x)\r\n#endif\r\n#endif\r\n#endif                                 /* RTW_HEADER_rt_defines_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Windows64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"pll_capi.c","type":"source","group":"interface","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * File: pll_capi.c\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include \"rtw_capi.h\"\r\n#ifdef HOST_CAPI_BUILD\r\n#include \"pll_capi_host.h\"\r\n#define sizeof(s)                      ((size_t)(0xFFFF))\r\n#undef rt_offsetof\r\n#define rt_offsetof(s,el)              ((uint16_T)(0xFFFF))\r\n#define TARGET_CONST\r\n#define TARGET_STRING(s)               (s)\r\n#else                                  /* HOST_CAPI_BUILD */\r\n#include \"builtin_typeid_types.h\"\r\n#include \"pll.h\"\r\n#include \"pll_capi.h\"\r\n#include \"pll_private.h\"\r\n#ifdef LIGHT_WEIGHT_CAPI\r\n#define TARGET_CONST\r\n#define TARGET_STRING(s)               ((NULL))\r\n#else\r\n#define TARGET_CONST                   const\r\n#define TARGET_STRING(s)               (s)\r\n#endif\r\n#endif                                 /* HOST_CAPI_BUILD */\r\n\r\n/* Individual block tuning is not valid when inline parameters is *\r\n * selected. An empty map is produced to provide a consistent     *\r\n * interface independent  of inlining parameters.                 *\r\n */\r\nstatic rtwCAPI_BlockParameters rtBlockParameters[] = {\r\n  /* addrMapIndex, blockPath,\r\n   * paramName, dataTypeIndex, dimIndex, fixPtIdx\r\n   */\r\n  {\r\n    0, (NULL), (NULL), 0, 0, 0\r\n  }\r\n};\r\n\r\n/* Tunable variable parameters */\r\nstatic rtwCAPI_ModelParameters rtModelParameters[] = {\r\n  /* addrMapIndex, varName, dataTypeIndex, dimIndex, fixPtIndex */\r\n  { 0, (NULL), 0, 0, 0 }\r\n};\r\n\r\n/* Data Type Map - use dataTypeMapIndex to access this structure */\r\nstatic TARGET_CONST rtwCAPI_DataTypeMap rtDataTypeMap[] = {\r\n  /* cName, mwName, numElements, elemMapIndex, dataSize, slDataId, *\r\n   * isComplex, isPointer, enumStorageType */\r\n  {\r\n    \"\", \"\", 0, 0, 0, 0, 0, 0, 0\r\n  }\r\n};\r\n\r\n#ifdef HOST_CAPI_BUILD\r\n#undef sizeof\r\n#endif\r\n\r\n/* Structure Element Map - use elemMapIndex to access this structure */\r\nstatic TARGET_CONST rtwCAPI_ElementMap rtElementMap[] = {\r\n  /* elementName, elementOffset, dataTypeIndex, dimIndex, fxpIndex */\r\n  { (NULL), 0, 0, 0, 0 },\r\n};\r\n\r\n/* Dimension Map - use dimensionMapIndex to access elements of ths structure*/\r\nstatic rtwCAPI_DimensionMap rtDimensionMap[] = {\r\n  /* dataOrientation, dimArrayIndex, numDims, vardimsIndex */\r\n  {\r\n    rtwCAPI_SCALAR, 0, 0, 0\r\n  }\r\n};\r\n\r\n/* Dimension Array- use dimArrayIndex to access elements of this array */\r\nstatic uint_T rtDimensionArray[] = { 0 };\r\n\r\n/* Fixed Point Map */\r\nstatic rtwCAPI_FixPtMap rtFixPtMap[] = {\r\n  /* fracSlopePtr, biasPtr, scaleType, wordLength, exponent, isSigned */\r\n  { (NULL), (NULL), rtwCAPI_FIX_RESERVED, 0, 0, (boolean_T)0 },\r\n};\r\n\r\n/* Sample Time Map - use sTimeIndex to access elements of ths structure */\r\nstatic rtwCAPI_SampleTimeMap rtSampleTimeMap[] = {\r\n  /* samplePeriodPtr, sampleOffsetPtr, tid, samplingMode */\r\n  {\r\n    (NULL), (NULL), 0, 0\r\n  }\r\n};\r\n\r\nstatic rtwCAPI_ModelMappingStaticInfo mmiStatic = {\r\n  /* Signals:{signals, numSignals,\r\n   *           rootInputs, numRootInputs,\r\n   *           rootOutputs, numRootOutputs},\r\n   * Params: {blockParameters, numBlockParameters,\r\n   *          modelParameters, numModelParameters},\r\n   * States: {states, numStates},\r\n   * Maps:   {dataTypeMap, dimensionMap, fixPtMap,\r\n   *          elementMap, sampleTimeMap, dimensionArray},\r\n   * TargetType: targetType\r\n   */\r\n  { (NULL), 0,\r\n    (NULL), 0,\r\n    (NULL), 0 },\r\n\r\n  { rtBlockParameters, 0,\r\n    rtModelParameters, 0 },\r\n\r\n  { (NULL), 0 },\r\n\r\n  { rtDataTypeMap, rtDimensionMap, rtFixPtMap,\r\n    rtElementMap, rtSampleTimeMap, rtDimensionArray },\r\n  \"float\",\r\n\r\n  { 4105431454U,\r\n    1689943400U,\r\n    2708922954U,\r\n    1017408638U },\r\n  (NULL), 0,\r\n  (boolean_T)0\r\n};\r\n\r\n/* Function to get C API Model Mapping Static Info */\r\nconst rtwCAPI_ModelMappingStaticInfo*\r\n  pll_GetCAPIStaticMap(void)\r\n{\r\n  return &mmiStatic;\r\n}\r\n\r\n/* Cache pointers into DataMapInfo substructure of RTModel */\r\n#ifndef HOST_CAPI_BUILD\r\n\r\nvoid pll_InitializeDataMapInfo(RT_MODEL_pll_T *const pll_M)\r\n{\r\n  /* Set C-API version */\r\n  rtwCAPI_SetVersion(pll_M->DataMapInfo.mmi, 1);\r\n\r\n  /* Cache static C-API data into the Real-time Model Data structure */\r\n  rtwCAPI_SetStaticMap(pll_M->DataMapInfo.mmi, &mmiStatic);\r\n\r\n  /* Cache static C-API logging data into the Real-time Model Data structure */\r\n  rtwCAPI_SetLoggingStaticMap(pll_M->DataMapInfo.mmi, (NULL));\r\n\r\n  /* Set Instance specific path */\r\n  rtwCAPI_SetPath(pll_M->DataMapInfo.mmi, (NULL));\r\n  rtwCAPI_SetFullPath(pll_M->DataMapInfo.mmi, (NULL));\r\n\r\n  /* Cache the instance C-API logging pointer */\r\n  rtwCAPI_SetInstanceLoggingInfo(pll_M->DataMapInfo.mmi, (NULL));\r\n\r\n  /* Set reference to submodels */\r\n  rtwCAPI_SetChildMMIArray(pll_M->DataMapInfo.mmi, (NULL));\r\n  rtwCAPI_SetChildMMIArrayLen(pll_M->DataMapInfo.mmi, 0);\r\n}\r\n\r\n#else                                  /* HOST_CAPI_BUILD */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  void pll_host_InitializeDataMapInfo(pll_host_DataMapInfo_T *dataMap, const\r\n    char *path)\r\n  {\r\n    /* Set C-API version */\r\n    rtwCAPI_SetVersion(dataMap->mmi, 1);\r\n\r\n    /* Cache static C-API data into the Real-time Model Data structure */\r\n    rtwCAPI_SetStaticMap(dataMap->mmi, &mmiStatic);\r\n\r\n    /* host data address map is NULL */\r\n    rtwCAPI_SetDataAddressMap(dataMap->mmi, (NULL));\r\n\r\n    /* host vardims address map is NULL */\r\n    rtwCAPI_SetVarDimsAddressMap(dataMap->mmi, (NULL));\r\n\r\n    /* Set Instance specific path */\r\n    rtwCAPI_SetPath(dataMap->mmi, path);\r\n    rtwCAPI_SetFullPath(dataMap->mmi, (NULL));\r\n\r\n    /* Set reference to submodels */\r\n    rtwCAPI_SetChildMMIArray(dataMap->mmi, (NULL));\r\n    rtwCAPI_SetChildMMIArrayLen(dataMap->mmi, 0);\r\n  }\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n#endif                                 /* HOST_CAPI_BUILD */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"pll_capi.h","type":"header","group":"interface","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * File: pll_capi.h\r\n *\r\n * Code generated for Simulink model 'pll'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu May 30 14:00:38 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_pll_capi_h_\r\n#define RTW_HEADER_pll_capi_h_\r\n#include \"pll.h\"\r\n\r\nextern void pll_InitializeDataMapInfo(RT_MODEL_pll_T *const pll_M);\r\n\r\n#endif                                 /* RTW_HEADER_pll_capi_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"pll_capi_host.h","type":"header","group":"other","path":"C:\\work\\study\\matlab仿真\\PLL+PI仿真\\pll_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef RTW_HEADER_pll_cap_host_h__\r\n#define RTW_HEADER_pll_cap_host_h__\r\n#ifdef HOST_CAPI_BUILD\r\n#include \"rtw_capi.h\"\r\n#include \"rtw_modelmap.h\"\r\n\r\ntypedef struct {\r\n  rtwCAPI_ModelMappingInfo mmi;\r\n} pll_host_DataMapInfo_T;\r\n\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  void pll_host_InitializeDataMapInfo(pll_host_DataMapInfo_T *dataMap, const\r\n    char *path);\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n#endif                                 /* HOST_CAPI_BUILD */\r\n#endif                                 /* RTW_HEADER_pll_cap_host_h__ */\r\n\r\n/* EOF: pll_capi_host.h */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":false,"showJustificationLinks":false,"showProfilingInfo":false,"showTaskSummary":false}};